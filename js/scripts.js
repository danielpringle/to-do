"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Create variables for our page elements
var form = document.querySelector('form');
var ul = document.querySelector('ul');
var clearAllButton = document.querySelector('button');
var input = document.getElementById('item'); // Let's create an empty array and set up a localStorage key called "items".

var itemsArray = localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : []; // We'll use JSON.stringify() to convert the data array to a string aslocalStorage only supports strings as values

localStorage.setItem('items', JSON.stringify(itemsArray)); // We'll use JSON.parse() to convert the contents of localStorage back into something we can work with later in the data variable.

var data = JSON.parse(localStorage.getItem('items')); // Add a class to our clearAllButton

clearAllButton.className = 'clear-all';
form.className = 'todo-form'; // We'll create a function to handle our progress bar.

/**
 * We'll create a function to display a progress bar.
 * We'll check how many current tasks there are and how many have been completed to get our percentage.
 */

var percentage = function percentage() {
  var totalTasks = document.querySelectorAll('li').length;
  var totalCompletedTasks = document.querySelectorAll('li .completed').length;
  var progress = Math.floor(totalCompletedTasks / totalTasks * 100);

  if (totalTasks > 0) {
    document.getElementById('task-progress').innerHTML = "".concat(progress, "%");
    document.getElementById('task-progress').style.width = "".concat(progress, "%");
  } else {
    document.getElementById('task-progress').innerHTML = '';
    document.getElementById('task-progress').style.width = '0%';
  }
};

percentage();
/**
 * Build out our li elemnet for each of our tasks.
 * Each li will need a checkbox, the inputted text and a delete button
 * Appends the list item to the ul.
 * We'll also run the percentage function again to update the frontend.
 */

var liMaker = function liMaker(text) {
  // create our variables
  var li = document.createElement('li');
  var deleteTaskButton = document.createElement('button');
  var checkbox = document.createElement('input');
  var labelContainer = document.createElement('label');
  var label = document.createElement('label');
  var labelText = document.createElement('span');
  li.setAttribute('draggable', 'true');
  li.className = 'draggable';
  ul.className = 'dropzone'; // Add classes and attributes

  li.setAttribute('draggable', 'true');
  li.className = 'draggable';
  ul.className = 'dropzone';
  labelContainer.className = 'container';
  label.className = 'newcheckmark';
  deleteTaskButton.className = 'delete';
  deleteTaskButton.innerHTML = '<ion-icon name="trash"></ion-icon>';
  labelText.textContent = text; // Create an event listener to remove individual tasks.

  function removeTaskLi(e) {
    e.target.closest('li').remove();
    percentage();
  }

  deleteTaskButton.addEventListener('click', removeTaskLi); // create our checkboxes and add unique ID

  for (var i = 0; i < itemsArray.length; i += 1) {
    checkbox.type = 'checkbox';
    checkbox.name = 'todo';
    checkbox.value = 'value';
    checkbox.id = "todo".concat(i);
    label.htmlFor = "todo".concat(i);
    li.id = "".concat(i);
  } // Add an event listener to toggle our completed class


  function completedTodo() {
    this.parentNode.classList.toggle('completed');
    percentage();
  }

  checkbox.addEventListener('click', completedTodo); // Build our li

  ul.appendChild(li);
  li.appendChild(labelContainer);
  labelContainer.appendChild(checkbox);
  labelContainer.appendChild(label);
  labelContainer.appendChild(labelText);
  labelContainer.appendChild(deleteTaskButton); // Build in draggable lists

  var draggables = document.querySelectorAll('.draggable');
  var containers = document.querySelectorAll('.dropzone');
  draggables.forEach(function (draggable) {
    draggable.addEventListener('dragstart', function () {
      // console.log('drag start');
      draggable.classList.add('dragging');
    });
    draggable.addEventListener('dragend', function () {
      draggable.classList.remove('dragging');
    });
  });

  function getDragAfterElement(container, y) {
    // console.log('fired');
    var draggableElements = _toConsumableArray(container.querySelectorAll('.draggable:not(.dragging)'));

    return draggableElements.reduce(function (closest, child) {
      var box = child.getBoundingClientRect();
      var offset = y - box.top - box.height / 2;

      if (offset < 0 && offset > closest.offset) {
        return {
          offset: offset,
          element: child
        };
      } else {
        return closest;
      }
    }, {
      offset: Number.NEGATIVE_INFINITY
    }).element;
  }

  containers.forEach(function (container) {
    container.addEventListener('dragover', function (e) {
      e.preventDefault();
      var afterElement = getDragAfterElement(container, e.clientY); // console.log('drag over');
      // console.log('afterElement');

      var draggable = document.querySelector('.dragging');

      if (afterElement == null) {
        container.appendChild(draggable);
      } else {
        container.insertBefore(draggable, afterElement);
      }
    });
  });
  /* */
};
/**
 * Create a task to listen for a submit event.
 * As we're not sending data to the server we'll use the e.preventDefault()
 * e.preventDefault() stops the form from doing the default submit action.
 */


function addTask(e) {
  e.preventDefault(); // We'll push any new input value into the array, then set the localStorage to the new, updated value.

  itemsArray.push(input.value);
  localStorage.setItem('items', JSON.stringify(itemsArray)); // Lets call the liMaker() function. This will create the item with the text of the input value and append it to the DOM.

  liMaker(input.value); // Lets set the input value to an empty string so we don't have to remove the last item entered manually.

  input.value = '';
}

form.addEventListener('submit', addTask);
/**
 * We'll loop through our items which has all the existing localStorage data in a form JavaScript can understand.
 * We'll run the liMaker() again to show display all the existing stored information on the front end every time the app is opened.
 */

data.forEach(function (item) {
  liMaker(item);
});
/**
 * Add an event listener to our 'clearAllButton' button that will clear all data from localStorage and remove every child from the ul.
 * We'll run the percentage function again to update the frontend.
 */

function removeAllTasks() {
  localStorage.clear();

  while (ul.firstChild) {
    ul.removeChild(ul.firstChild);
  }

  itemsArray = [];
  percentage();
}

clearAllButton.addEventListener('click', removeAllTasks);
/**
 * We'll create a function to get the current date.
 * We'll display the current date on the frontend.
 */

function beDate() {
  var currentDate = new Date();
  var year = currentDate.getFullYear();
  var date = currentDate.getDate();
  var weekday = new Array(7);
  weekday[0] = 'Sunday';
  weekday[1] = 'Monday';
  weekday[2] = 'Tuesday';
  weekday[3] = 'Wednesday';
  weekday[4] = 'Thursday';
  weekday[5] = 'Friday';
  weekday[6] = 'Saturday';
  var months = new Array(12);
  months[0] = 'January';
  months[1] = 'February';
  months[2] = 'March';
  months[3] = 'April';
  months[4] = 'May';
  months[5] = 'June';
  months[6] = 'July';
  months[7] = 'August';
  months[8] = 'September';
  months[9] = 'October';
  months[10] = 'November';
  months[11] = 'December';
  var displayWeekday = weekday[currentDate.getDay()];
  var displayMonth = months[currentDate.getMonth()];
  var formatted = "".concat(displayWeekday, ", ").concat(displayMonth, " ").concat(date, " ").concat(year);
  document.getElementById('display-date').innerHTML = formatted;
}

beDate();
/**
 * We'll create a function to get the current time.
 * We'll add a extra '0' to numbers less than 10 so 2 digets are always displayed on the frontend.
 * We'll set an interval around the function so the time updates in the browser every minute.
 */

function beCurrentTime() {
  var d = new Date();
  var x = document.getElementById('display-time');
  var h = (d.getHours() < 10 ? '0' : '') + d.getHours();
  var m = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes(); // const s = (d.getSeconds() < 10 ? '0' : '') + d.getSeconds();

  x.innerHTML = "".concat(h, ":").concat(m);
}

beCurrentTime();
setInterval(function beTimeInterval1() {
  beCurrentTime();
}, 1000);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
